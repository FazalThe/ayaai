-- Drop existing table and policies if they exist (to handle re-running migration)
DROP POLICY IF EXISTS "Users can delete their own bookmarks" ON public.bookmarks;
DROP POLICY IF EXISTS "Users can insert their own bookmarks" ON public.bookmarks;
DROP POLICY IF EXISTS "Users can view their own bookmarks" ON public.bookmarks;
DROP TABLE IF EXISTS public.bookmarks;

-- Create bookmarks table with message_id and message_content
CREATE TABLE IF NOT EXISTS public.bookmarks (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES public.users(id) ON DELETE CASCADE NOT NULL,
  message_id TEXT NOT NULL, -- Store the unique message ID (string) from AI SDK
  message_content TEXT,     -- Store the actual bookmarked content for easy display
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  UNIQUE (user_id, message_id) -- Ensure a user doesn't bookmark the same message twice
);

-- Add comments for clarity
COMMENT ON COLUMN public.bookmarks.message_id IS 'Unique ID of the message generated by the Vercel AI SDK.';
COMMENT ON COLUMN public.bookmarks.message_content IS 'The text content of the bookmarked message.';

-- Enable Row Level Security
ALTER TABLE public.bookmarks ENABLE ROW LEVEL SECURITY;

-- Create policies for bookmarks table (using auth.uid())
CREATE POLICY "Users can view their own bookmarks"
ON public.bookmarks FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own bookmarks"
ON public.bookmarks FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can delete their own bookmarks"
ON public.bookmarks FOR DELETE USING (auth.uid() = user_id);

-- Add indexes for performance
CREATE INDEX idx_bookmarks_user_id ON public.bookmarks(user_id);
CREATE INDEX idx_bookmarks_user_message_id ON public.bookmarks(user_id, message_id); -- Index for unique constraint and lookups
